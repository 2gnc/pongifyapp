// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

enum ClubRole {
  OWNER
  MEMBER
  ADMIN
}

enum EventType {
  DRAFT
  SEALED
  TWO_PICKS_DRAFT
  PRERELEASE
  COMMANDER_DRAFT
  BUNDLE_SEALED
  DISPLAY_SEALED
  COMMANDER_PARTY
  CUBE_DRAFT
  RAINBOW_DRAFT
}

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String   @id @default(uuid())
  telegramId       String   @unique
  userName         String?
  firstName        String?
  canCreateClub    Boolean

  ownedClub        Club?           // владелец клуба (1:1)
  memberships      Membership[]    // членство в клубах
  bans             BanHistory[]    // записи в банлистах клубов
  bansMadeBy       BanHistory[]    @relation("bansMadeBy") // <-- добавь это
}

model Club {
  id               String @id @default(uuid())
  name             String
  description      String
  createdAt        DateTime @default(now())
  isOpen           Boolean

// связь с владельцем
  ownerId          String   @unique
  owner            User    @relation(fields: [ownerId], references: [id])

  // участники и админы
  members          Membership[]
  events           Event[]        // события клуба
  bans             BanHistory[]
}

model Membership {
  id               String   @id @default(uuid())
  userId           String   
  clubId           String   
  role             ClubRole @default(MEMBER)
  joinedAt         DateTime @default(now())
  isBanned         Boolean  @default(false)

  user             User @relation(fields: [userId], references: [id])
  club             Club @relation(fields: [clubId], references: [id])

  @@unique([userId, clubId]) // нельзя дважды вступить в один клуб
}

model BanHistory {
  id                String   @id @default(uuid())
  clubId            String 
  userId            String 
  reason            String?
  bannedById        String?          // кто назначил бан (опционально)
  bannedAt          DateTime @default(now())
  unbannedAt        DateTime?

  club              Club @relation(fields: [clubId], references: [id])
  user              User @relation(fields: [userId], references: [id])
  bannedBy          User? @relation("bansMadeBy", fields: [bannedById], references: [id])

  @@unique([clubId, userId, bannedAt]) // гарантирует уникальность записи по времени
}

model Event {
  id                 String        @id @default(uuid())
  clubId             String
  club               Club          @relation(fields: [clubId], references: [id])
  type               EventType
  startAt            DateTime
  description        String
  setCodes           String[]      // массив кодов сетов
  maxParticipants    Int?          // если null, то неограничено
  registrationOpensAt DateTime
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
}

model Set {
  id              String    @id @default(uuid())
  code            String    @unique
  name            String
  iconSvgUri      String
  parentSetCode   String?   // опционально, код родительского сета (если есть)
}
